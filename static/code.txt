// Welcome.
// This is a code-themed incremental game.
// You can unlock various projects of mine and other misc fun stuff.
// For any instructions, refer to the '?' tab.
// To get started, write some lines with your computer keyboard, or use the keyboard button below.
// Have fun!

"use client";

import {
  Card,
  Text,
  Title,
  BarList,
  Flex,
  Grid,
  Bold,
  AreaChart,
} from "@tremor/react";
import Image from "next/image";

const chartdata = [
  {
	date: "Jan 23",
	Visitors: 2890,
  },
  {
	date: "Feb 23",
	Visitors: 2756,
  },
  {
	date: "Mar 23",
	Visitors: 3322,
  },
  {
	date: "Apr 23",
	Visitors: 3470,
  },
  {
	date: "May 23",
	Visitors: 3475,
  },
  {
	date: "Jun 23",
	Visitors: 3129,
  },
];

const pages = [
  { name: "/platforms-starter-kit", value: 1230 },
  { name: "/vercel-is-now-bercel", value: 751 },
  { name: "/nextjs-conf", value: 471 },
  { name: "/150m-series-d", value: 280 },
  { name: "/about", value: 78 },
];

const referrers = [
  { name: "t.co", value: 453 },
  { name: "vercel.com", value: 351 },
  { name: "linkedin.com", value: 271 },
  { name: "google.com", value: 191 },
  {
	name: "news.ycombinator.com",
	value: 71,
  },
];

const countries = [
  { name: "United States of America", value: 789, code: "US" },
  { name: "India", value: 676, code: "IN" },
  { name: "Germany", value: 564, code: "DE" },
  { name: "United Kingdom", value: 234, code: "GB" },
  { name: "Spain", value: 191, code: "ES" },
];

const categories = [
  {
	title: "Top Pages",
	subtitle: "Page",
	data: pages,
  },
  {
	title: "Top Referrers",
	subtitle: "Source",
	data: referrers,
  },
  {
	title: "Countries",
	subtitle: "Country",
	data: countries,
  },
];

export default function AnalyticsMockup() {
  return (
	<div className="grid gap-6">
	  <Card>
		<Title>Visitors</Title>
		<AreaChart
		  className="mt-4 h-72"
		  data={chartdata}
		  index="date"
		  categories={["Visitors"]}
		  colors={["indigo"]}
		  valueFormatter={(number: number) =>
			Intl.NumberFormat("us").format(number).toString()
		  }
		/>
	  </Card>
	  <Grid numItemsSm={2} numItemsLg={3} className="gap-6">
		{categories.map(({ title, subtitle, data }) => (
		  <Card key={title} className="max-w-lg">
			<Title>{title}</Title>
			<Flex className="mt-4">
			  <Text>
				<Bold>{subtitle}</Bold>
			  </Text>
			  <Text>
				<Bold>Visitors</Bold>
			  </Text>
			</Flex>
			<BarList
			  // @ts-ignore
			  data={data.map(({ name, value, code }) => ({
				name,
				value,
				icon: () => {
				  if (title === "Top Referrers") {
					return (
					  <Image
						src={`https://www.google.com/s2/favicons?sz=64&domain_url=${name}`}
						alt={name}
						className="mr-2.5"
						width={20}
						height={20}
					  />
					);
				  } else if (title === "Countries") {
					return (
					  <Image
						src={`https://flag.vercel.app/m/${code}.svg`}
						className="mr-2.5"
						alt={code}
						width={24}
						height={16}
					  />
					);
				  } else {
					return null;
				  }
				},
			  }))}
			  className="mt-2"
			/>
		  </Card>
		))}
	  </Grid>
	</div>
  );
}


import Link from "next/link";
import BlurImage from "./blur-image";
import { placeholderBlurhash, toDateString } from "@/lib/utils";
import type { SelectPost } from "@/lib/schema";

interface BlogCardProps {
  data: Pick<
	SelectPost,
	"slug" | "image" | "imageBlurhash" | "title" | "description" | "createdAt"
  >;
}

export default function BlogCard({ data }: BlogCardProps) {
  return (
	<Link href={`/${data.slug}`}>
	  <div className="ease overflow-hidden rounded-2xl border-2 border-stone-100 bg-white shadow-md transition-all duration-200 hover:-translate-y-1 hover:shadow-xl dark:border-stone-800">
		<BlurImage
		  src={data.image!}
		  alt={data.title ?? "Blog Post"}
		  width={500}
		  height={400}
		  className="h-64 w-full object-cover"
		  placeholder="blur"
		  blurDataURL={data.imageBlurhash ?? placeholderBlurhash}
		/>
		<div className="h-36 border-t border-stone-200 px-5 py-8 dark:border-stone-700 dark:bg-black">
		  <h3 className="font-title text-xl tracking-wide dark:text-white">
			{data.title}
		  </h3>
		  <p className="text-md my-2 truncate italic text-stone-600 dark:text-stone-400">
			{data.description}
		  </p>
		  <p className="my-2 text-sm text-stone-600 dark:text-stone-400">
			Published {toDateString(data.createdAt)}
		  </p>
		</div>
	  </div>
	</Link>
  );
}


"use client";

import cn from "clsx";
import Image from "next/image";
import { useState } from "react";

import type { ComponentProps } from "react";

export default function BlurImage(props: ComponentProps<typeof Image>) {
  const [isLoading, setLoading] = useState(true);

  return (
	<Image
	  {...props}
	  alt={props.alt}
	  className={cn(
		props.className,
		"duration-700 ease-in-out",
		isLoading ? "scale-105 blur-lg" : "scale-100 blur-0",
	  )}
	  onLoad={() => setLoading(false)}
	/>
  );
}


"use client";

import { useTransition } from "react";
import { createPost } from "@/lib/actions";
import { cn } from "@/lib/utils";
import { useParams, useRouter } from "next/navigation";
import LoadingDots from "@/components/icons/loading-dots";
import va from "@vercel/analytics";

export default function CreatePostButton() {
  const router = useRouter();
  const { id } = useParams() as { id: string };
  const [isPending, startTransition] = useTransition();

  return (
	<button
	  onClick={() =>
		startTransition(async () => {
		  const post = await createPost(null, id, null);
		  va.track("Created Post");
		  router.refresh();
		  router.push(`/post/${post.id}`);
		})
	  }
	  className={cn(
		"flex h-8 w-36 items-center justify-center space-x-2 rounded-lg border text-sm transition-all focus:outline-none sm:h-9",
		isPending
		  ? "cursor-not-allowed border-stone-200 bg-stone-100 text-stone-400 dark:border-stone-700 dark:bg-stone-800 dark:text-stone-300"
		  : "border border-black bg-black text-white hover:bg-white hover:text-black active:bg-stone-100 dark:border-stone-700 dark:hover:border-stone-200 dark:hover:bg-black dark:hover:text-white dark:active:bg-stone-800",
	  )}
	  disabled={isPending}
	>
	  {isPending ? <LoadingDots color="#808080" /> : <p>Create New Post</p>}
	</button>
  );
}


"use client";

import { useModal } from "@/components/modal/provider";
import { ReactNode } from "react";

export default function CreateSiteButton({
  children,
}: {
  children: ReactNode;
}) {
  const modal = useModal();
  return (
	<button
	  onClick={() => modal?.show(children)}
	  className="rounded-lg border border-black bg-black px-4 py-1.5 text-sm font-medium text-white transition-all hover:bg-white hover:text-black active:bg-stone-100 dark:border-stone-700 dark:hover:border-stone-200 dark:hover:bg-black dark:hover:text-white dark:active:bg-stone-800"
	>
	  Create New Site
	</button>
  );
}


"use client";

import { useState } from "react";

export default function CTA() {
  const [closeCTA, setCloseCTA] = useState(false);
  return (
	<div
	  className={`${
		closeCTA ? "h-14 lg:h-auto" : "h-60 sm:h-40 lg:h-auto"
	  } fixed inset-x-0 bottom-5 mx-5 flex max-w-screen-xl flex-col items-center justify-between space-y-3 rounded-lg border-t-4 border-black bg-white px-5 pb-3 pt-0 drop-shadow-lg transition-all duration-150 ease-in-out lg:flex-row lg:space-y-0 lg:pt-3 xl:mx-auto dark:border
		  dark:border-t-4 dark:border-stone-700 dark:bg-black dark:text-white`}
	>
	  <button
		onClick={() => setCloseCTA(!closeCTA)}
		className={`${
		  closeCTA ? "rotate-180" : "rotate-0"
		} absolute right-3 top-2 text-black transition-all duration-150 ease-in-out lg:hidden dark:text-white`}
	  >
		<svg
		  viewBox="0 0 24 24"
		  width="30"
		  height="30"
		  stroke="currentColor"
		  strokeWidth="1.5"
		  strokeLinecap="round"
		  strokeLinejoin="round"
		  fill="none"
		  shapeRendering="geometricPrecision"
		>
		  <path d="M6 9l6 6 6-6" />
		</svg>
	  </button>
	  <div className="text-center lg:text-left">
		<p className="font-title text-lg text-black sm:text-2xl dark:text-white">
		  Platforms Starter Kit Demo
		</p>
		<p
		  className={`${
			closeCTA ? "hidden lg:block" : ""
		  } mt-2 text-sm text-stone-700 lg:mt-0 dark:text-stone-300`}
		>
		  This is a demo site showcasing how to build a multi-tenant application
		  with{" "}
		  <a
			className="font-semibold text-black underline dark:text-white"
			href="https://platformize.co"
			rel="noreferrer"
			target="_blank"
		  >
			custom domain
		  </a>{" "}
		  support.
		</p>
	  </div>
	  <div
		className={`${
		  closeCTA ? "hidden lg:flex" : ""
		} flex w-full flex-col space-y-3 text-center sm:flex-row sm:space-x-3 sm:space-y-0 lg:w-auto`}
	  >
		<a
		  className="whitespace-no-wrap flex-auto rounded-md border border-stone-200 px-5 py-1 font-title text-lg text-black transition-all duration-150 ease-in-out hover:border-black sm:py-3 dark:border-stone-700 dark:text-white dark:hover:border-white"
		  href="https://app.vercel.pub"
		  rel="noreferrer"
		  target="_blank"
		>
		  Create your publication
		</a>
		<a
		  className="whitespace-no-wrap flex-auto rounded-md border border-black bg-black px-5 py-1 font-title text-lg text-white transition-all duration-150 ease-in-out hover:bg-white hover:text-black sm:py-3 dark:border-white dark:bg-white dark:text-black dark:hover:bg-black dark:hover:text-white"
		  href="https://vercel.com/guides/nextjs-multi-tenant-application"
		  rel="noreferrer"
		  target="_blank"
		>
		  Clone and deploy
		</a>
	  </div>
	</div>
  );
}


"use client";

import { useEffect, useState, useTransition } from "react";
import { updatePost, updatePostMetadata } from "@/lib/actions";
import { Editor as NovelEditor } from "novel";
import TextareaAutosize from "react-textarea-autosize";
import { cn } from "@/lib/utils";
import LoadingDots from "./icons/loading-dots";
import { ExternalLink } from "lucide-react";
import { toast } from "sonner";
import type { SelectPost } from "@/lib/schema";

type PostWithSite = SelectPost & { site: { subdomain: string | null } | null };

export default function Editor({ post }: { post: PostWithSite }) {
  let [isPendingSaving, startTransitionSaving] = useTransition();
  let [isPendingPublishing, startTransitionPublishing] = useTransition();
  const [data, setData] = useState<PostWithSite>(post);
  const [hydrated, setHydrated] = useState(false);

  const url = process.env.NEXT_PUBLIC_VERCEL_ENV
	? `https://${data.site?.subdomain}.${process.env.NEXT_PUBLIC_ROOT_DOMAIN}/${data.slug}`
	: `http://${data.site?.subdomain}.localhost:3000/${data.slug}`;

  // listen to CMD + S and override the default behavior
  useEffect(() => {
	const onKeyDown = (e: KeyboardEvent) => {
	  if (e.metaKey && e.key === "s") {
		e.preventDefault();
		startTransitionSaving(async () => {
		  await updatePost(data);
		});
	  }
	};
	document.addEventListener("keydown", onKeyDown);
	return () => {
	  document.removeEventListener("keydown", onKeyDown);
	};
  }, [data, startTransitionSaving]);

  return (
	<div className="relative min-h-[500px] w-full max-w-screen-lg border-stone-200 p-12 px-8 sm:mb-[calc(20vh)] sm:rounded-lg sm:border sm:px-12 sm:shadow-lg dark:border-stone-700">
	  <div className="absolute right-5 top-5 mb-5 flex items-center space-x-3">
		{data.published && (
		  <a
			href={url}
			target="_blank"
			rel="noopener noreferrer"
			className="flex items-center space-x-1 text-sm text-stone-400 hover:text-stone-500"
		  >
			<ExternalLink className="h-4 w-4" />
		  </a>
		)}
		<div className="rounded-lg bg-stone-100 px-2 py-1 text-sm text-stone-400 dark:bg-stone-800 dark:text-stone-500">
		  {isPendingSaving ? "Saving..." : "Saved"}
		</div>
		<button
		  onClick={() => {
			const formData = new FormData();
			console.log(data.published, typeof data.published);
			formData.append("published", String(!data.published));
			startTransitionPublishing(async () => {
			  await updatePostMetadata(formData, post.id, "published").then(
				() => {
				  toast.success(
					`Successfully ${
					  data.published ? "unpublished" : "published"
					} your post.`,
				  );
				  setData((prev) => ({ ...prev, published: !prev.published }));
				},
			  );
			});
		  }}
		  className={cn(
			"flex h-7 w-24 items-center justify-center space-x-2 rounded-lg border text-sm transition-all focus:outline-none",
			isPendingPublishing
			  ? "cursor-not-allowed border-stone-200 bg-stone-100 text-stone-400 dark:border-stone-700 dark:bg-stone-800 dark:text-stone-300"
			  : "border border-black bg-black text-white hover:bg-white hover:text-black active:bg-stone-100 dark:border-stone-700 dark:hover:border-stone-200 dark:hover:bg-black dark:hover:text-white dark:active:bg-stone-800",
		  )}
		  disabled={isPendingPublishing}
		>
		  {isPendingPublishing ? (
			<LoadingDots />
		  ) : (
			<p>{data.published ? "Unpublish" : "Publish"}</p>
		  )}
		</button>
	  </div>
	  <div className="mb-5 flex flex-col space-y-3 border-b border-stone-200 pb-5 dark:border-stone-700">
		<input
		  type="text"
		  placeholder="Title"
		  defaultValue={post?.title || ""}
		  autoFocus
		  onChange={(e) => setData({ ...data, title: e.target.value })}
		  className="dark:placeholder-text-600 border-none px-0 font-cal text-3xl placeholder:text-stone-400 focus:outline-none focus:ring-0 dark:bg-black dark:text-white"
		/>
		<TextareaAutosize
		  placeholder="Description"
		  defaultValue={post?.description || ""}
		  onChange={(e) => setData({ ...data, description: e.target.value })}
		  className="dark:placeholder-text-600 w-full resize-none border-none px-0 placeholder:text-stone-400 focus:outline-none focus:ring-0 dark:bg-black dark:text-white"
		/>
	  </div>
	  <NovelEditor
		className="relative block"
		defaultValue={post?.content || undefined}
		onUpdate={(editor) => {
		  setData((prev) => ({
			...prev,
			content: editor?.storage.markdown.getMarkdown(),
		  }));
		}}
		onDebouncedUpdate={() => {
		  if (
			data.title === post.title &&
			data.description === post.description &&
			data.content === post.content
		  ) {
			return;
		  }
		  startTransitionSaving(async () => {
			await updatePost(data);
		  });
		}}
	  />
	</div>
  );
}

"use client";

import { LogOut } from "lucide-react";
import { signOut } from "next-auth/react";

export default function LogoutButton() {
  return (
	<button
	  onClick={() => signOut()}
	  className="rounded-lg p-1.5 text-stone-700 transition-all duration-150 ease-in-out hover:bg-stone-200 active:bg-stone-300 dark:text-white dark:hover:bg-stone-700 dark:active:bg-stone-800"
	>
	  <LogOut width={18} />
	</button>
  );
}


"use client";

import { MDXRemote, MDXRemoteProps } from "next-mdx-remote";
import { replaceLinks } from "@/lib/remark-plugins";
import { Tweet } from "react-tweet";
import BlurImage from "@/components/blur-image";
import styles from "./mdx.module.css";
import type { SelectPost } from "@/lib/schema";

export default function MDX({ source }: { source: MDXRemoteProps }) {
  const components = {
	a: replaceLinks,
	BlurImage,
	Examples,
	Tweet,
  };

  return (
	<article
	  className={`prose-md prose prose-stone m-auto w-11/12 sm:prose-lg dark:prose-invert sm:w-3/4 ${styles.root}`}
	  suppressHydrationWarning={true}
	>
	  {/* @ts-ignore */}
	  <MDXRemote {...source} components={components} />
	</article>
  );
}

interface ExampleCardProps
  extends Pick<SelectPost, "description" | "image" | "imageBlurhash"> {
  name: string | null;
  url: string | null;
}

function Examples({ data }: { data: string }) {
  if (!data) return null;
  const parsedData = JSON.parse(data) as Array<ExampleCardProps>;
  return (
	<div className="not-prose my-10 grid grid-cols-1 gap-x-4 gap-y-4 lg:-mx-36 lg:mb-20 lg:grid-cols-3 lg:gap-y-8">
	  {parsedData.map((d) => (
		<ExamplesCard data={d} key={d.name} />
	  ))}
	</div>
  );
}

function ExamplesCard({ data }: { data: ExampleCardProps }) {
  return (
	<a href={`https://${data.url}`} target="_blank" rel="noreferrer">
	  <div className="ease hidden rounded-2xl border-2 border-gray-100 bg-white shadow-md transition-all duration-200 hover:-translate-y-1 hover:shadow-xl lg:block">
		<div className="overflow-hidden rounded-t-2xl">
		  <BlurImage
			alt={data.name ?? "Card Thumbnail"}
			width={500}
			height={400}
			className="h-64 w-full object-cover"
			src={data.image ?? "/placeholder.png"}
			placeholder="blur"
			blurDataURL={data.imageBlurhash ?? undefined}
		  />
		</div>
		<div className="h-36 px-5 py-6">
		  <h3 className="truncate font-cal text-2xl font-bold tracking-wide">
			{data.name}
		  </h3>
		  <p className="mt-3 text-base italic leading-snug text-gray-800">
			{data.description}
		  </p>
		</div>
	  </div>
	  <div className="ease flex h-36 items-center overflow-hidden rounded-xl border-2 border-gray-100 bg-white transition-all duration-200 focus:border-black active:border-black md:h-48 lg:hidden">
		<div className="relative h-full w-2/5">
		  <BlurImage
			alt={data.name ?? "Card thumbnail"}
			width={500}
			height={400}
			className="h-full object-cover"
			src={`/examples/${data.image}`}
			placeholder="blur"
			blurDataURL={data.imageBlurhash ?? undefined}
		  />
		</div>
		<div className="w-3/5 px-5 py-6">
		  <h3 className="my-0 truncate font-cal text-xl font-bold tracking-wide dark:text-white">
			{data.name}
		  </h3>
		  <p className="mt-3 text-sm font-normal italic leading-snug text-gray-800">
			{data.description}
		  </p>
		</div>
	  </div>
	</a>
  );
}


"use client";

import Link from "next/link";
import {
  ArrowLeft,
  BarChart3,
  Edit3,
  Globe,
  Layout,
  LayoutDashboard,
  Megaphone,
  Menu,
  Newspaper,
  Settings,
  FileCode,
  Github,
} from "lucide-react";
import {
  useParams,
  usePathname,
  useSelectedLayoutSegments,
} from "next/navigation";
import { ReactNode, useEffect, useMemo, useState } from "react";
import { getSiteFromPostId } from "@/lib/actions";
import Image from "next/image";

const externalLinks = [
  {
	name: "Read announcement",
	href: "https://vercel.com/blog/platforms-starter-kit",
	icon: <Megaphone width={18} />,
  },
  {
	name: "Star on GitHub",
	href: "https://github.com/vercel/platforms",
	icon: <Github width={18} />,
  },
  {
	name: "Read the guide",
	href: "https://vercel.com/guides/nextjs-multi-tenant-application",
	icon: <FileCode width={18} />,
  },
  {
	name: "View demo site",
	href: "https://demo.vercel.pub",
	icon: <Layout width={18} />,
  },
  {
	name: "Deploy your own",
	href: "https://vercel.com/templates/next.js/platforms-starter-kit",
	icon: (
	  <svg
		width={18}
		viewBox="0 0 76 76"
		fill="none"
		xmlns="http://www.w3.org/2000/svg"
		className="py-1 text-black dark:text-white"
	  >
		<path d="M37.5274 0L75.0548 65H0L37.5274 0Z" fill="currentColor" />
	  </svg>
	),
  },
];

export default function Nav({ children }: { children: ReactNode }) {
  const segments = useSelectedLayoutSegments();
  const { id } = useParams() as { id?: string };

  const [siteId, setSiteId] = useState<string | null>();

  useEffect(() => {
	if (segments[0] === "post" && id) {
	  getSiteFromPostId(id).then((id) => {
		setSiteId(id);
	  });
	}
  }, [segments, id]);

  const tabs = useMemo(() => {
	if (segments[0] === "site" && id) {
	  return [
		{
		  name: "Back to All Sites",
		  href: "/sites",
		  icon: <ArrowLeft width={18} />,
		},
		{
		  name: "Posts",
		  href: `/site/${id}`,
		  isActive: segments.length === 2,
		  icon: <Newspaper width={18} />,
		},
		{
		  name: "Analytics",
		  href: `/site/${id}/analytics`,
		  isActive: segments.includes("analytics"),
		  icon: <BarChart3 width={18} />,
		},
		{
		  name: "Settings",
		  href: `/site/${id}/settings`,
		  isActive: segments.includes("settings"),
		  icon: <Settings width={18} />,
		},
	  ];
	} else if (segments[0] === "post" && id) {
	  return [
		{
		  name: "Back to All Posts",
		  href: siteId ? `/site/${siteId}` : "/sites",
		  icon: <ArrowLeft width={18} />,
		},
		{
		  name: "Editor",
		  href: `/post/${id}`,
		  isActive: segments.length === 2,
		  icon: <Edit3 width={18} />,
		},
		{
		  name: "Settings",
		  href: `/post/${id}/settings`,
		  isActive: segments.includes("settings"),
		  icon: <Settings width={18} />,
		},
	  ];
	}
	return [
	  {
		name: "Overview",
		href: "/",
		isActive: segments.length === 0,
		icon: <LayoutDashboard width={18} />,
	  },
	  {
		name: "Sites",
		href: "/sites",
		isActive: segments[0] === "sites",
		icon: <Globe width={18} />,
	  },
	  {
		name: "Settings",
		href: "/settings",
		isActive: segments[0] === "settings",
		icon: <Settings width={18} />,
	  },
	];
  }, [segments, id, siteId]);

  const [showSidebar, setShowSidebar] = useState(false);

  const pathname = usePathname();

  useEffect(() => {
	// hide sidebar on path change
	setShowSidebar(false);
  }, [pathname]);

  return (
	<>
	  <button
		className={`fixed z-20 ${
		  // left align for Editor, right align for other pages
		  segments[0] === "post" && segments.length === 2 && !showSidebar
			? "left-5 top-5"
			: "right-5 top-7"
		} sm:hidden`}
		onClick={() => setShowSidebar(!showSidebar)}
	  >
		<Menu width={20} />
	  </button>
	  <div
		className={`transform ${
		  showSidebar ? "w-full translate-x-0" : "-translate-x-full"
		} fixed z-10 flex h-full flex-col justify-between border-r border-stone-200 bg-stone-100 p-4 transition-all sm:w-60 sm:translate-x-0 dark:border-stone-700 dark:bg-stone-900`}
	  >
		<div className="grid gap-2">
		  <div className="flex items-center space-x-2 rounded-lg px-2 py-1.5">
			<a
			  href="https://vercel.com/templates/next.js/platforms-starter-kit"
			  target="_blank"
			  rel="noopener noreferrer"
			  className="rounded-lg p-1.5 hover:bg-stone-200 dark:hover:bg-stone-700"
			>
			  <svg
				width="26"
				viewBox="0 0 76 65"
				fill="none"
				xmlns="http://www.w3.org/2000/svg"
				className="text-black dark:text-white"
			  >
				<path
				  d="M37.5274 0L75.0548 65H0L37.5274 0Z"
				  fill="currentColor"
				/>
			  </svg>
			</a>
			<div className="h-6 rotate-[30deg] border-l border-stone-400 dark:border-stone-500" />
			<Link
			  href="/"
			  className="rounded-lg p-2 hover:bg-stone-200 dark:hover:bg-stone-700"
			>
			  <Image
				src="/logo.png"
				width={24}
				height={24}
				alt="Logo"
				className="dark:scale-110 dark:rounded-full dark:border dark:border-stone-400"
			  />
			</Link>
		  </div>
		  <div className="grid gap-1">
			{tabs.map(({ name, href, isActive, icon }) => (
			  <Link
				key={name}
				href={href}
				className={`flex items-center space-x-3 ${
				  isActive ? "bg-stone-200 text-black dark:bg-stone-700" : ""
				} rounded-lg px-2 py-1.5 transition-all duration-150 ease-in-out hover:bg-stone-200 active:bg-stone-300 dark:text-white dark:hover:bg-stone-700 dark:active:bg-stone-800`}
			  >
				{icon}
				<span className="text-sm font-medium">{name}</span>
			  </Link>
			))}
		  </div>
		</div>
		<div>
		  <div className="grid gap-1">
			{externalLinks.map(({ name, href, icon }) => (
			  <a
				key={name}
				href={href}
				target="_blank"
				rel="noopener noreferrer"
				className="flex items-center justify-between rounded-lg px-2 py-1.5 transition-all duration-150 ease-in-out hover:bg-stone-200 active:bg-stone-300 dark:text-white dark:hover:bg-stone-700 dark:active:bg-stone-800"
			  >
				<div className="flex items-center space-x-3">
				  {icon}
				  <span className="text-sm font-medium">{name}</span>
				</div>
				<p>↗</p>
			  </a>
			))}
		  </div>
		  <div className="my-2 border-t border-stone-200 dark:border-stone-700" />
		  {children}
		</div>
	  </div>
	</>
  );
}


import { getSession } from "@/lib/auth";
import CreateSiteButton from "./create-site-button";
import CreateSiteModal from "./modal/create-site";
import Link from "next/link";
import db from "@/lib/db";
import { sites } from "@/lib/schema";
import { count, eq } from "drizzle-orm";

export default async function OverviewSitesCTA() {
  const session = await getSession();
  if (!session) {
	return 0;
  }
  const [sitesResult] = await db
	.select({ count: count() })
	.from(sites)
	.where(eq(sites.userId, session.user.id));

  return sitesResult.count > 0 ? (
	<Link
	  href="/sites"
	  className="rounded-lg border border-black bg-black px-4 py-1.5 text-sm font-medium text-white transition-all hover:bg-white hover:text-black active:bg-stone-100 dark:border-stone-700 dark:hover:border-stone-200 dark:hover:bg-black dark:hover:text-white dark:active:bg-stone-800"
	>
	  View All Sites
	</Link>
  ) : (
	<CreateSiteButton>
	  <CreateSiteModal />
	</CreateSiteButton>
  );
}


"use client";

import { random } from "@/lib/utils";
import { Card, Metric, Text, AreaChart, BadgeDelta, Flex } from "@tremor/react";
import { useMemo } from "react";

export default function OverviewStats() {
  const data = useMemo(() => {
	const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun"];
	return [
	  ...months.map((month) => ({
		Month: `${month} 23`,
		"Total Visitors": random(20000, 170418),
	  })),
	  {
		Month: "Jul 23",
		"Total Visitors": 170418,
	  },
	];
  }, []);

  return (
	<div className="grid gap-6 sm:grid-cols-2">
	  <Card className="dark:!bg-stone-900">
		<Text>Total Visitors</Text>
		<Flex
		  className="space-x-3 truncate"
		  justifyContent="start"
		  alignItems="baseline"
		>
		  <Metric className="font-cal">170,418</Metric>
		  <BadgeDelta
			deltaType="moderateIncrease"
			className="dark:bg-green-900 dark:bg-opacity-50 dark:text-green-400"
		  >
			34.3%
		  </BadgeDelta>
		</Flex>
		<AreaChart
		  className="mt-6 h-28"
		  data={data}
		  index="Month"
		  valueFormatter={(number: number) =>
			`${Intl.NumberFormat("us").format(number).toString()}`
		  }
		  categories={["Total Visitors"]}
		  colors={["blue"]}
		  showXAxis={true}
		  showGridLines={false}
		  startEndOnly={true}
		  showYAxis={false}
		  showLegend={false}
		/>
	  </Card>
	</div>
  );
}

export default function PlaceholderCard() {
  return (
	<div className="relative rounded-lg border border-stone-200 pb-10 shadow-md transition-all hover:shadow-xl dark:border-stone-700">
	  <div className="h-44 w-full animate-pulse bg-stone-100 dark:bg-stone-800" />
	  <div className="p-4">
		<div className="h-4 w-1/2 animate-pulse rounded-lg bg-stone-100 dark:bg-stone-800" />
		<div className="mt-2 h-3 w-3/4 animate-pulse rounded-lg bg-stone-100 dark:bg-stone-800" />
		<div className="mt-2 h-3 w-1/2 animate-pulse rounded-lg bg-stone-100 dark:bg-stone-800" />
	  </div>
	</div>
  );
}

import BlurImage from "@/components/blur-image";
import type { SelectPost, SelectSite } from "@/lib/schema";
import { placeholderBlurhash, random } from "@/lib/utils";
import { BarChart, ExternalLink } from "lucide-react";
import Link from "next/link";

export default function PostCard({
  data,
}: {
  data: SelectPost & { site: SelectSite | null };
}) {
  const url = `${data.site?.subdomain}.${process.env.NEXT_PUBLIC_ROOT_DOMAIN}/${data.slug}`;

  return (
    <div className="relative rounded-lg border border-stone-200 pb-10 shadow-md transition-all hover:shadow-xl dark:border-stone-700 dark:hover:border-white">
      <Link
        href={`/post/${data.id}`}
        className="flex flex-col overflow-hidden rounded-lg"
      >
        <div className="relative h-44 overflow-hidden">
          <BlurImage
            alt={data.title ?? "Card thumbnail"}
            width={500}
            height={400}
            className="h-full object-cover"
            src={data.image ?? "/placeholder.png"}
            placeholder="blur"
            blurDataURL={data.imageBlurhash ?? placeholderBlurhash}
          />
          {!data.published && (
            <span className="absolute bottom-2 right-2 rounded-md border border-stone-200 bg-white px-3 py-0.5 text-sm font-medium text-stone-600 shadow-md">
              Draft
            </span>
          )}
        </div>
        <div className="border-t border-stone-200 p-4 dark:border-stone-700">
          <h3 className="my-0 truncate font-cal text-xl font-bold tracking-wide dark:text-white dark:text-white">
            {data.title}
          </h3>
          <p className="mt-2 line-clamp-1 text-sm font-normal leading-snug text-stone-500 dark:text-stone-400">
            {data.description}
          </p>
        </div>
      </Link>
      <div className="absolute bottom-4 flex w-full px-4">
        <a
          href={
            process.env.NEXT_PUBLIC_VERCEL_ENV
              ? `https://${url}`
              : `http://${data.site?.subdomain}.localhost:3000/${data.slug}`
          }
          target="_blank"
          rel="noreferrer"
          className="truncate rounded-md bg-stone-100 px-2 py-1 text-sm font-medium text-stone-600 transition-colors hover:bg-stone-200 dark:bg-stone-800 dark:text-stone-400 dark:hover:bg-stone-700"
        >
          {url} ↗
        </a>
      </div>
    </div>
  );
}


import { getSession } from "@/lib/auth";
import db from "@/lib/db";
import Image from "next/image";
import { redirect } from "next/navigation";
import PostCard from "./post-card";

export default async function Posts({
  siteId,
  limit,
}: {
  siteId?: string;
  limit?: number;
}) {
  const session = await getSession();
  if (!session?.user) {
    redirect("/login");
  }

  const posts = await db.query.posts.findMany({
    where: (posts, { and, eq }) =>
      and(
        eq(posts.userId, session.user.id),
        siteId ? eq(posts.siteId, siteId) : undefined,
      ),
    with: {
      site: true,
    },
    orderBy: (posts, { desc }) => desc(posts.updatedAt),
    ...(limit ? { limit } : {}),
  });

  return posts.length > 0 ? (
    <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 xl:grid-cols-4">
      {posts.map((post) => (
        <PostCard key={post.id} data={post} />
      ))}
    </div>
  ) : (
    <div className="flex flex-col items-center space-x-4">
      <h1 className="font-cal text-4xl">No Posts Yet</h1>
      <Image
        alt="missing post"
        src="https://illustrations.popsy.co/gray/graphic-design.svg"
        width={400}
        height={400}
      />
      <p className="text-lg text-stone-500">
        You do not have any posts yet. Create one to get started.
      </p>
    </div>
  );
}


import { getSession } from "@/lib/auth";
import { redirect } from "next/navigation";
import Link from "next/link";
import Image from "next/image";
import LogoutButton from "./logout-button";

export default async function Profile() {
  const session = await getSession();
  if (!session?.user) {
    redirect("/login");
  }

  return (
    <div className="flex w-full items-center justify-between">
      <Link
        href="/settings"
        className="flex w-full flex-1 items-center space-x-3 rounded-lg px-2 py-1.5 transition-all duration-150 ease-in-out hover:bg-stone-200 active:bg-stone-300 dark:text-white dark:hover:bg-stone-700 dark:active:bg-stone-800"
      >
        <Image
          src={
            session.user.image ??
            `https://avatar.vercel.sh/${session.user.email}`
          }
          width={40}
          height={40}
          alt={session.user.name ?? "User avatar"}
          className="h-6 w-6 rounded-full"
        />
        <span className="truncate text-sm font-medium">
          {session.user.name}
        </span>
      </Link>
      <LogoutButton />
    </div>
  );
}


import BlurImage from "@/components/blur-image";
import type { SelectSite } from "@/lib/schema";
import { placeholderBlurhash, random } from "@/lib/utils";
import { BarChart, ExternalLink } from "lucide-react";
import Link from "next/link";

export default function SiteCard({ data }: { data: SelectSite }) {
  const url = `${data.subdomain}.${process.env.NEXT_PUBLIC_ROOT_DOMAIN}`;
  return (
    <div className="relative rounded-lg border border-stone-200 pb-10 shadow-md transition-all hover:shadow-xl dark:border-stone-700 dark:hover:border-white">
      <Link
        href={`/site/${data.id}`}
        className="flex flex-col overflow-hidden rounded-lg"
      >
        <BlurImage
          alt={data.name ?? "Card thumbnail"}
          width={500}
          height={400}
          className="h-44 object-cover"
          src={data.image ?? "/placeholder.png"}
          placeholder="blur"
          blurDataURL={data.imageBlurhash ?? placeholderBlurhash}
        />
        <div className="border-t border-stone-200 p-4 dark:border-stone-700">
          <h3 className="my-0 truncate font-cal text-xl font-bold tracking-wide dark:text-white">
            {data.name}
          </h3>
          <p className="mt-2 line-clamp-1 text-sm font-normal leading-snug text-stone-500 dark:text-stone-400">
            {data.description}
          </p>
        </div>
      </Link>
      <div className="absolute bottom-4 flex w-full justify-between space-x-4 px-4">
        <a
          href={
            process.env.NEXT_PUBLIC_VERCEL_ENV
              ? `https://${url}`
              : `http://${data.subdomain}.localhost:3000`
          }
          target="_blank"
          rel="noreferrer"
          className="truncate rounded-md bg-stone-100 px-2 py-1 text-sm font-medium text-stone-600 transition-colors hover:bg-stone-200 dark:bg-stone-800 dark:text-stone-400 dark:hover:bg-stone-700"
        >
          {url} ↗
        </a>
        <Link
          href={`/site/${data.id}/analytics`}
          className="flex items-center rounded-md bg-green-100 px-2 py-1 text-sm font-medium text-green-600 transition-colors hover:bg-green-200 dark:bg-green-900 dark:bg-opacity-50 dark:text-green-400 dark:hover:bg-green-800 dark:hover:bg-opacity-50"
        >
          <BarChart height={16} />
          <p>{random(10, 40)}%</p>
        </Link>
      </div>
    </div>
  );
}


import { getSession } from "@/lib/auth";
import db from "@/lib/db";
import Image from "next/image";
import { redirect } from "next/navigation";
import SiteCard from "./site-card";

export default async function Sites({ limit }: { limit?: number }) {
  const session = await getSession();
  if (!session) {
    redirect("/login");
  }

  const sites = await db.query.sites.findMany({
    where: (sites, { eq }) => eq(sites.userId, session.user.id),
    orderBy: (sites, { asc }) => asc(sites.createdAt),
    ...(limit ? { limit } : {}),
  });

  return sites.length > 0 ? (
    <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 xl:grid-cols-4">
      {sites.map((site) => (
        <SiteCard key={site.id} data={site} />
      ))}
    </div>
  ) : (
    <div className="mt-20 flex flex-col items-center space-x-4">
      <h1 className="font-cal text-4xl">No Sites Yet</h1>
      <Image
        alt="missing site"
        src="https://illustrations.popsy.co/gray/web-design.svg"
        width={400}
        height={400}
      />
      <p className="text-lg text-stone-500">
        You do not have any sites yet. Create one to get started.
      </p>
    </div>
  );
}


"use client";

import { useState, useCallback, useMemo, ChangeEvent } from "react";
import { toast } from "sonner";
import LoadingDots from "@/components/icons/loading-dots";

export default function Uploader() {
  const [data, setData] = useState<{
    image: string | null;
  }>({
    image: null,
  });
  const [file, setFile] = useState<File | null>(null);

  const [dragActive, setDragActive] = useState(false);

  const onChangePicture = useCallback(
    (event: ChangeEvent<HTMLInputElement>) => {
      const file = event.currentTarget.files && event.currentTarget.files[0];
      if (file) {
        if (file.size / 1024 / 1024 > 50) {
          toast.error("File size too big (max 50MB)");
        } else {
          setFile(file);
          const reader = new FileReader();
          reader.onload = (e) => {
            setData((prev) => ({ ...prev, image: e.target?.result as string }));
          };
          reader.readAsDataURL(file);
        }
      }
    },
    [setData],
  );

  const [saving, setSaving] = useState(false);

  const saveDisabled = useMemo(() => {
    return !data.image || saving;
  }, [data.image, saving]);

  return (
    <form
      className="grid gap-6"
      onSubmit={async (e) => {
        e.preventDefault();
        setSaving(true);
        fetch("/api/upload", {
          method: "POST",
          headers: { "content-type": file?.type || "application/octet-stream" },
          body: file,
        }).then(async (res) => {
          if (res.status === 200) {
            const { url } = await res.json();
            toast(
              <div className="relative">
                <div className="p-2">
                  <p className="font-semibold text-gray-900">File uploaded!</p>
                  <p className="mt-1 text-sm text-gray-500">
                    Your file has been uploaded to{" "}
                    <a
                      className="font-medium text-gray-900 underline"
                      href={url}
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      {url}
                    </a>
                  </p>
                </div>
              </div>,
            );
          } else {
            const error = await res.text();
            toast.error(error);
          }
          setSaving(false);
        });
      }}
    >
      <div>
        <div className="mb-4 space-y-1">
          <h2 className="text-xl font-semibold">Upload a file</h2>
          <p className="text-sm text-gray-500">
            Accepted formats: .png, .jpg, .gif, .mp4
          </p>
        </div>
        <label
          htmlFor="image-upload"
          className="group relative mt-2 flex h-72 cursor-pointer flex-col items-center justify-center rounded-md border border-gray-300 bg-white shadow-sm transition-all hover:bg-gray-50"
        >
          <div
            className="absolute z-[5] h-full w-full rounded-md"
            onDragOver={(e) => {
              e.preventDefault();
              e.stopPropagation();
              setDragActive(true);
            }}
            onDragEnter={(e) => {
              e.preventDefault();
              e.stopPropagation();
              setDragActive(true);
            }}
            onDragLeave={(e) => {
              e.preventDefault();
              e.stopPropagation();
              setDragActive(false);
            }}
            onDrop={(e) => {
              e.preventDefault();
              e.stopPropagation();
              setDragActive(false);

              const file = e.dataTransfer.files && e.dataTransfer.files[0];
              if (file) {
                if (file.size / 1024 / 1024 > 50) {
                  toast.error("File size too big (max 50MB)");
                } else {
                  setFile(file);
                  const reader = new FileReader();
                  reader.onload = (e) => {
                    setData((prev) => ({
                      ...prev,
                      image: e.target?.result as string,
                    }));
                  };
                  reader.readAsDataURL(file);
                }
              }
            }}
          />
          <div
            className={`${
              dragActive ? "border-2 border-black" : ""
            } absolute z-[3] flex h-full w-full flex-col items-center justify-center rounded-md px-10 transition-all ${
              data.image
                ? "bg-white/80 opacity-0 hover:opacity-100 hover:backdrop-blur-md"
                : "bg-white opacity-100 hover:bg-gray-50"
            }`}
          >
            <svg
              className={`${
                dragActive ? "scale-110" : "scale-100"
              } h-7 w-7 text-gray-500 transition-all duration-75 group-hover:scale-110 group-active:scale-95`}
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"></path>
              <path d="M12 12v9"></path>
              <path d="m16 16-4-4-4 4"></path>
            </svg>
            <p className="mt-2 text-center text-sm text-gray-500">
              Drag and drop or click to upload.
            </p>
            <p className="mt-2 text-center text-sm text-gray-500">
              Max file size: 50MB
            </p>
            <span className="sr-only">Photo upload</span>
          </div>
          {data.image && (
            // eslint-disable-next-line @next/next/no-img-element
            <img
              src={data.image}
              alt="Preview"
              className="h-full w-full rounded-md object-cover"
            />
          )}
        </label>
        <div className="mt-1 flex rounded-md shadow-sm">
          <input
            id="image-upload"
            name="image"
            type="file"
            accept="image/*"
            className="sr-only"
            onChange={onChangePicture}
          />
        </div>
      </div>

      <button
        disabled={saveDisabled}
        className={`${
          saveDisabled
            ? "cursor-not-allowed border-gray-200 bg-gray-100 text-gray-400"
            : "border-black bg-black text-white hover:bg-white hover:text-black"
        } flex h-10 w-full items-center justify-center rounded-md border text-sm transition-all focus:outline-none`}
      >
        {saving ? (
          <LoadingDots color="#808080" />
        ) : (
          <p className="text-sm">Confirm upload</p>
        )}
      </button>
    </form>
  );
}

